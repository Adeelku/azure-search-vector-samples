// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Vector.Indexer;
//
//    var embedding = Embedding.FromJson(jsonString);

namespace VectorSearch
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Embedding
    {
        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("data")]
        public List<Datum> Data { get; set; }

        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("usage")]
        public Usage Usage { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("index")]
        public long Index { get; set; }

        [JsonProperty("embedding")]
        public List<double> Embedding { get; set; }
    }

    public partial class Usage
    {
        [JsonProperty("prompt_tokens")]
        public long PromptTokens { get; set; }

        [JsonProperty("total_tokens")]
        public long TotalTokens { get; set; }
    }

    public partial class Embedding
    {
        public static Embedding FromJson(string json) => JsonConvert.DeserializeObject<Embedding>(json, VectorSearch.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Embedding self) => JsonConvert.SerializeObject(self, VectorSearch.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
